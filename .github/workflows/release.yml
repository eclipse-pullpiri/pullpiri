name: Release

# Trigger this workflow only when a new Git tag starting with 'v' is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - v*

# Cancel any in-progress runs if a new tag is pushed for the same release group
concurrency:
  group: "release-${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  # Step 1: Run full CI to validate Rust codebase (formatting, clippy, tests)
  run-rust-ci:
    uses: ./.github/workflows/run-ci.yml

  # Step 5: Collect all generated artifacts and publish to GitHub Release
  tag_release_artifacts:
    name: Collect and upload release artifacts
    runs-on: ubuntu-latest

    # Only run this if triggered by a version tag push
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    # Wait for all required jobs to complete successfully
    needs:
      - run-rust-ci

    permissions: write-all

    steps:
      # Checkout code with submodules
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      # Download nodeagent binary - amd64
      - name: Download nodeagent binary
        uses: actions/download-artifact@v4
        with:
          name: nodeagent-binary-amd64
          path: dist/binaries/amd

      # Download nodeagent binary - arm64
      - name: Download nodeagent binary
        uses: actions/download-artifact@v4
        with:
          name: nodeagent-binary-arm64
          path: dist/binaries/arm

      # Upload all reports as GitHub Release assets

      # Optional: upload coverage for player component
      # - name: Upload test coverage report for player to release
      #   uses: svenstaro/upload-release-action@v2
      #   id: upload_test_coverage_report_player
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: dist/coverage/player/*.html
      #     file_glob: true
      #     tag: ${{ github.ref }}

      # Optional: upload coverage for agent component
      # - name: Upload test coverage report for agent to release
      #   uses: svenstaro/upload-release-action@v2
      #   id: upload_test_coverage_report_agent
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: dist/coverage/agent/*.html
      #     file_glob: true
      #     tag: ${{ github.ref }}

      # Upload AMD64 nodeagent binary to release
      - name: Upload nodeagent binary (Linux AMD64) to release
        uses: svenstaro/upload-release-action@v2
        id: upload_nodeagent_amd64
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/binaries/amd/nodeagent-linux-amd64
          asset_name: nodeagent-linux-amd64
          tag: ${{ github.ref }}

      # Upload ARM64 nodeagent binary to release
      - name: Upload nodeagent binary (Linux ARM64) to release
        uses: svenstaro/upload-release-action@v2
        id: upload_nodeagent_arm64
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/binaries/arm/nodeagent-linux-arm64
          asset_name: nodeagent-linux-arm64
          tag: ${{ github.ref }}

      # Upload nodeagent installation and utility scripts
      - name: Upload nodeagent installation script to release
        uses: svenstaro/upload-release-action@v2
        id: upload_install_script
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: doc/scripts/install_nodeagent.sh
          asset_name: install_nodeagent.sh
          tag: ${{ github.ref }}

      - name: Upload node ready check script to release
        uses: svenstaro/upload-release-action@v2
        id: upload_check_script
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: doc/scripts/node_ready_check.sh
          asset_name: node_ready_check.sh
          tag: ${{ github.ref }}

      # Fetch latest release metadata (used by quality manifest tool)
      #- name: Gets latest created release info
      #  id: latest_release_info
      #  uses: joutvhu/get-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Generate quality manifest using Eclipse Dash QueVee
      #- name: Collect quality artifacts with quevee
      #  id: quevee_manifest
      #  uses: eclipse-dash/quevee@v1
      #  with:
      #    release_url: ${{ steps.latest_release_info.outputs.html_url }}
          
      # Upload the generated quality manifest to GitHub Release
      #- name: Upload quality manifest to release
      #  uses: svenstaro/upload-release-action@v2
      #  with:
      #    repo_token: ${{ secrets.GITHUB_TOKEN }}
      #    file: ${{ steps.quevee_manifest.outputs.manifest_file }}
      #    tag: ${{ github.ref }}

  # Final Step: Build and push multi-arch container images to GHCR
  build-and-push-container:
    name: Build and Push Container Image
    uses: ./.github/workflows/build-container.yml
    needs:
      - tag_release_artifacts
    permissions:
      packages: write
