/*
 * SPDX-FileCopyrightText: Copyright 2024 LG Electronics Inc.
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package apiserver;

// API Server service for cluster management as per Korean LLD specification
service ApiServerService {
  // Node management related API
  rpc GetNodes(GetNodesRequest) returns (GetNodesResponse);
  rpc GetNode(GetNodeRequest) returns (GetNodeResponse);
  rpc RegisterNode(NodeRegistrationRequest) returns (NodeRegistrationResponse);
  
  // Topology management related API
  rpc GetTopology(GetTopologyRequest) returns (GetTopologyResponse);
  rpc UpdateTopology(UpdateTopologyRequest) returns (UpdateTopologyResponse);
}

// Node list request/response
message GetNodesRequest {
  optional string filter = 1;
}

message GetNodesResponse {
  repeated Node nodes = 1;
}

// Single node request/response
message GetNodeRequest {
  string node_id = 1;
}

message GetNodeResponse {
  Node node = 1;
}

// Node registration request/response
message NodeRegistrationRequest {
  string node_id = 1;
  string hostname = 2;
  string ip_address = 3;
  NodeRole role = 4;
  ResourceInfo resources = 5;
  Credentials credentials = 6;
}

message NodeRegistrationResponse {
  bool success = 1;
  string message = 2;
  string cluster_id = 3;
}

// Topology request/response
message GetTopologyRequest {}

message GetTopologyResponse {
  ClusterTopology topology = 1;
}

message UpdateTopologyRequest {
  ClusterTopology topology = 1;
}

message UpdateTopologyResponse {
  ClusterTopology updated_topology = 1;
  bool success = 2;
  optional string error_message = 3;
}

// Data Structures
message Node {
  string node_id = 1;
  string hostname = 2;
  string ip_address = 3;
  NodeRole role = 4;
  NodeStatus status = 5;
  ResourceInfo resources = 6;
  map<string, string> labels = 7;
  int64 created_at = 8;
  int64 last_heartbeat = 9;
}

message ResourceInfo {
  uint32 cpu_cores = 1;
  uint64 memory_mb = 2;
  uint64 disk_gb = 3;
  double cpu_usage = 4;
  double memory_usage = 5;
}

message Credentials {
  string token = 1;
  string certificate = 2;
}

message ClusterTopology {
  string cluster_id = 1;
  string cluster_name = 2;
  TopologyType type = 3;
  repeated Node master_nodes = 4;
  repeated Node sub_nodes = 5;
  map<string, string> config = 6;
}

enum NodeRole {
  UNKNOWN_ROLE = 0;
  MASTER = 1;
  SUB = 2;
}

enum NodeStatus {
  PENDING = 0;
  INITIALIZING = 1;
  READY = 2;
  NOT_READY = 3;
  MAINTENANCE = 4;
  TERMINATING = 5;
}

enum TopologyType {
  SIMPLE = 0;
  HIERARCHICAL = 1;
  MESH = 2;
  HYBRID = 3;
}