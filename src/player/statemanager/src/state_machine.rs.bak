/*
 * SPDX-FileCopyrightText: Copyright 2024 LG Electronics Inc.
 * SPDX-License-Identifier: Apache-2.0
 */

//! State Machine Implementation for PICCOLO Resource State Management
//!
//! This module implements the core state transition logic for Scenario, Package, and Model resources
//! according to the PICCOLO specification. It provides efficient data structures and algorithms
//! for managing state changes and enforcing the defined state transition tables.
//!
//! # Architecture Overview
//!
//! The state machine follows a table-driven approach where each resource type (Scenario, Package, Model)
//! has its own transition table defining valid state changes. The system supports:
//! - Conditional transitions based on resource state
//! - Action execution during state changes non-blocking
//! - Health monitoring and failure handling
//! - Backoff mechanisms for failed transitions
//!
//! # Usage Example
//!
//! ```rust
//! let mut state_machine = StateMachine::new();
//! let state_change = StateChange { /* ... */ };
//! let result = state_machine.process_state_change(state_change);
//! ```

use crate::types::{ActionCommand, HealthStatus, ResourceState, StateTransition, TransitionResult};
use common::monitoringserver::ContainerInfo;
use common::statemanager::{
    ErrorCode, ModelState, PackageState, ResourceType, ScenarioState, StateChange,
};
use common::Result;
use std::collections::HashMap;
use tokio::sync::mpsc;
use tokio::time::Instant;

// ========================================
// CONSTANTS AND CONFIGURATION
// ========================================

/// Maximum consecutive failures before marking resource as unhealthy
const MAX_CONSECUTIVE_FAILURES: u32 = 3;

impl TransitionResult {
    /// Check if the transition was successful
    pub fn is_success(&self) -> bool {
        matches!(self.error_code, ErrorCode::Success)
    }

    /// Check if the transition failed
    pub fn is_failure(&self) -> bool {
        !self.is_success()
    }

    /// Convert TransitionResult to StateChangeResponse for proto compatibility
    pub fn to_state_change_response(&self) -> common::statemanager::StateChangeResponse {
        common::statemanager::StateChangeResponse {
            message: self.message.clone(),
            transition_id: self.transition_id.clone(),
            timestamp_ns: std::time::SystemTime::now()
                .duration_since(std::time::UNIX_EPOCH)
                .unwrap_or_default()
                .as_nanos() as i64,
            error_code: self.error_code as i32,
            error_details: self.error_details.clone(),
        }
    }
}

/// Core state machine implementation for PICCOLO resource management
///
/// This is the central component that manages all resource state transitions,
/// enforces business rules, and maintains the current state of all resources
/// in the system.
///
/// # Design Principles
/// - **Deterministic**: Same inputs always produce same outputs
/// - **Auditable**: All state changes are tracked with timestamps
/// - **Resilient**: Handles failures gracefully with backoff mechanisms
/// - **Extensible**: New resource types can be added with their own transition tables
///
/// # Thread Safety
/// This implementation is not thread-safe. External synchronization is required
/// for concurrent access across multiple threads.
pub struct StateMachine {
    /// State transition tables indexed by resource type
    ///
    /// Each resource type has its own set of valid transitions, allowing
    /// for type-specific state management rules and behaviors.
    transition_tables: HashMap<ResourceType, Vec<StateTransition>>,

    /// Current state tracking for all managed resources
    ///
    /// Resources are keyed by a unique identifier (typically resource name)
    /// and contain complete state information including metadata and health status.
    resource_states: HashMap<String, ResourceState>,

    /// Action command sender for async execution
    action_sender: Option<mpsc::UnboundedSender<ActionCommand>>,
}

impl StateMachine {
    /// Creates a new StateMachine with predefined transition tables
    ///
    /// Initializes the state machine with empty resource tracking and
    /// populates the transition tables for all supported resource types.
    ///
    /// # Returns
    /// A fully configured StateMachine ready to process state changes
    ///
    /// # Examples
    /// ```rust
    /// let state_machine = StateMachine::new();
    /// ```
    pub fn new() -> Self {
        let mut state_machine = StateMachine {
            transition_tables: HashMap::new(),
            resource_states: HashMap::new(),
            action_sender: None,
        };

        // Initialize transition tables for each resource type
        state_machine.initialize_scenario_transitions();
        state_machine.initialize_package_transitions();

        state_machine
    }

    /// Initialize async action executor
    pub fn initialize_action_executor(&mut self) -> mpsc::UnboundedReceiver<ActionCommand> {
        let (sender, receiver) = mpsc::unbounded_channel();
        self.action_sender = Some(sender);
        receiver
    }

    // ========================================
    // STATE TRANSITION TABLE INITIALIZATION
    // ========================================

    /// Initialize the state transition table for Scenario resources
    ///
    /// Populates the transition table with all valid state changes for Scenario resources
    /// according to the PICCOLO specification. This includes transitions for:
    /// - Creation and initialization
    /// - Activation and deactivation
    /// - Error handling and recovery
    /// - Cleanup and termination
    ///
    /// # Implementation Note
    /// This method should define transitions like:
    /// - "Inactive" -> "Active" on "activate" event
    /// - "Active" -> "Inactive" on "deactivate" event
    /// - Any state -> "Failed" on "error" event
    fn initialize_scenario_transitions(&mut self) {
        let scenario_transitions = vec![
            StateTransition {
                from_state: ScenarioState::Idle as i32,
                event: "scenario_activation".to_string(),
                to_state: ScenarioState::Waiting as i32,
                condition: None,
                action: "start_condition_evaluation".to_string(),
            },
            StateTransition {
                from_state: ScenarioState::Waiting as i32,
                event: "condition_met".to_string(),
                to_state: ScenarioState::Allowed as i32,
                condition: None,
                action: "start_policy_verification".to_string(),
            },
            StateTransition {
                from_state: ScenarioState::Allowed as i32,
                event: "policy_verification_success".to_string(),
                to_state: ScenarioState::Playing as i32,
                condition: None,
                action: "execute_action_on_target_package".to_string(),
            },
            StateTransition {
                from_state: ScenarioState::Allowed as i32,
                event: "policy_verification_failure".to_string(),
                to_state: ScenarioState::Denied as i32,
                condition: None,
                action: "log_denial_generate_alert".to_string(),
            },
        ];
        self.transition_tables
            .insert(ResourceType::Scenario, scenario_transitions);
    }

    /// Initialize the state transition table for Package resources
    ///
    /// Configures all valid state transitions for Package resources, including:
    /// - Download and installation states
    /// - Verification and validation phases
    /// - Update and rollback mechanisms
    /// - Cleanup and removal operations
    ///
    /// # Implementation Note
    /// Package transitions typically involve more complex workflows due to
    /// dependency management and rollback requirements.
    fn initialize_package_transitions(&mut self) {
        let package_transitions = vec![
            StateTransition {
                from_state: PackageState::Unspecified as i32,
                event: "launch_request".to_string(),
                to_state: PackageState::Initializing as i32,
                condition: None,
                action: "start_model_creation_allocate_resources".to_string(),
            },
            StateTransition {
                from_state: PackageState::Initializing as i32,
                event: "initialization_complete".to_string(),
                to_state: PackageState::Running as i32,
                condition: Some("all_models_normal".to_string()),
                action: "update_state_announce_availability".to_string(),
            },
            StateTransition {
                from_state: PackageState::Initializing as i32,
                event: "partial_initialization_failure".to_string(),
                to_state: PackageState::Degraded as i32,
                condition: Some("critical_models_normal".to_string()),
                action: "log_warning_activate_partial_functionality".to_string(),
            },
            StateTransition {
                from_state: PackageState::Initializing as i32,
                event: "critical_initialization_failure".to_string(),
                to_state: PackageState::Error as i32,
                condition: Some("critical_models_failed".to_string()),
                action: "log_error_attempt_recovery".to_string(),
            },
            StateTransition {
                from_state: PackageState::Running as i32,
                event: "model_issue_detected".to_string(),
                to_state: PackageState::Degraded as i32,
                condition: Some("non_critical_model_issues".to_string()),
                action: "log_warning_maintain_partial_functionality".to_string(),
            },
            StateTransition {
                from_state: PackageState::Running as i32,
                event: "critical_issue_detected".to_string(),
                to_state: PackageState::Error as i32,
                condition: Some("critical_model_issues".to_string()),
                action: "log_error_attempt_recovery".to_string(),
            },
            StateTransition {
                from_state: PackageState::Running as i32,
                event: "pause_request".to_string(),
                to_state: PackageState::Paused as i32,
                condition: None,
                action: "pause_models_preserve_state".to_string(),
            },
            StateTransition {
                from_state: PackageState::Degraded as i32,
                event: "model_recovery".to_string(),
                to_state: PackageState::Running as i32,
                condition: Some("all_models_recovered".to_string()),
                action: "update_state_restore_full_functionality".to_string(),
            },
            StateTransition {
                from_state: PackageState::Degraded as i32,
                event: "additional_model_issues".to_string(),
                to_state: PackageState::Error as i32,
                condition: Some("critical_models_affected".to_string()),
                action: "log_error_attempt_recovery".to_string(),
            },
            StateTransition {
                from_state: PackageState::Degraded as i32,
                event: "pause_request".to_string(),
                to_state: PackageState::Paused as i32,
                condition: None,
                action: "pause_models_preserve_state".to_string(),
            },
            StateTransition {
                from_state: PackageState::Error as i32,
                event: "recovery_successful".to_string(),
                to_state: PackageState::Running as i32,
                condition: Some("depends_on_recovery_level".to_string()),
                action: "update_state_announce_functionality_restoration".to_string(),
            },
            StateTransition {
                from_state: PackageState::Paused as i32,
                event: "resume_request".to_string(),
                to_state: PackageState::Running as i32,
                condition: Some("depends_on_previous_state".to_string()),
                action: "resume_models_restore_state".to_string(),
            },
            StateTransition {
                from_state: PackageState::Running as i32,
                event: "update_request".to_string(),
                to_state: PackageState::Updating as i32,
                condition: None,
                action: "start_update_process".to_string(),
            },
            StateTransition {
                from_state: PackageState::Updating as i32,
                event: "update_successful".to_string(),
                to_state: PackageState::Running as i32,
                condition: None,
                action: "activate_new_version_update_state".to_string(),
            },
            StateTransition {
                from_state: PackageState::Updating as i32,
                event: "update_failed".to_string(),
                to_state: PackageState::Error as i32,
                condition: Some("depends_on_rollback_settings".to_string()),
                action: "rollback_or_error_handling".to_string(),
            },
        ];

        self.transition_tables
            .insert(ResourceType::Package, package_transitions);
    }

    // ========================================
    // CORE STATE PROCESSING
    // ========================================
    /// Process a state change request with non-blocking action execution
    pub fn process_state_change(&mut self, state_change: StateChange) -> TransitionResult {
        // Validate input parameters
        if let Err(validation_error) = self.validate_state_change(&state_change) {
            return TransitionResult {
                new_state: Self::state_str_to_enum(
                    state_change.current_state.as_str(),
                    state_change.resource_type,
                ),
                error_code: ErrorCode::InvalidRequest,
                message: format!("Invalid state change request: {validation_error}"),
                actions_to_execute: vec![],
                transition_id: state_change.transition_id.clone(),
                error_details: validation_error.to_string(),
            };
        }

        // Convert i32 to ResourceType enum
        let resource_type = match ResourceType::try_from(state_change.resource_type) {
            Ok(rt) => rt,
            Err(_) => {
                return TransitionResult {
                    new_state: Self::state_str_to_enum(
                        state_change.current_state.as_str(),
                        state_change.resource_type,
                    ),
                    error_code: ErrorCode::InvalidStateTransition,
                    message: format!("Invalid resource type: {}", state_change.resource_type),
                    actions_to_execute: vec![],
                    transition_id: state_change.transition_id.clone(),
                    error_details: format!(
                        "Unsupported resource type ID: {}",
                        state_change.resource_type
                    ),
                };
            }
        };

        let resource_key = self.generate_resource_key(resource_type, &state_change.resource_name);

        // Get current state - use provided current_state for new resources
        let current_state = match self.resource_states.get(&resource_key) {
            Some(existing_state) => existing_state.current_state,
            None => Self::state_str_to_enum(
                state_change.current_state.as_str(),
                state_change.resource_type,
            ),
        };

        // No special handling needed for current states since legacy states are removed

        // Find valid transition
        let transition_event = self.infer_event_from_states(
            current_state,
            Self::state_str_to_enum(
                state_change.target_state.as_str(),
                state_change.resource_type,
            ),
            resource_type,
        );

        if let Some(transition) = self.find_valid_transition(
            resource_type,
            current_state,
            &transition_event,
            Self::state_str_to_enum(
                state_change.target_state.as_str(),
                state_change.resource_type,
            ),
        ) {
            // Check conditions if any
            if let Some(ref condition) = transition.condition {
                if !self.evaluate_condition(condition, &state_change) {
                    return TransitionResult {
                        new_state: current_state,
                        error_code: ErrorCode::PreconditionFailed,
                        message: format!("Condition not met: {condition}"),
                        actions_to_execute: vec![],
                        transition_id: state_change.transition_id.clone(),
                        error_details: format!("Failed condition evaluation: {condition}"),
                    };
                }
            }

            // Execute transition - this is immediate and non-blocking
            self.update_resource_state(
                &resource_key,
                &state_change,
                transition.to_state,
                resource_type,
            );

            // **NON-BLOCKING ACTION EXECUTION** - Queue action for async execution
            if let Some(ref sender) = self.action_sender {
                let action_command = ActionCommand {
                    action: transition.action.clone(),
                    resource_key: resource_key.clone(),
                    resource_type,
                    transition_id: state_change.transition_id.clone(),
                    context: self.build_action_context(&state_change, &transition),
                };

                // Send action for async execution (non-blocking)
                if let Err(e) = sender.send(action_command) {
                    eprintln!("Warning: Failed to queue action for execution: {e}");
                }
            }

            let transitioned_state_str = match resource_type {
                ResourceType::Scenario => ScenarioState::try_from(transition.to_state)
                    .map(|s| s.as_str_name())
                    .unwrap_or("UNKNOWN"),
                ResourceType::Package => PackageState::try_from(transition.to_state)
                    .map(|s| s.as_str_name())
                    .unwrap_or("UNKNOWN"),
                ResourceType::Model => ModelState::try_from(transition.to_state)
                    .map(|s| s.as_str_name())
                    .unwrap_or("UNKNOWN"),
                _ => "UNKNOWN",
            };

            // Create successful transition result
            let transition_result = TransitionResult {
                new_state: transition.to_state,
                error_code: ErrorCode::Success,
                message: format!("Successfully transitioned to {transitioned_state_str}"),
                actions_to_execute: vec![transition.action.clone()],
                transition_id: state_change.transition_id.clone(),
                error_details: String::new(),
            };

            self.update_health_status(&resource_key, &transition_result);

            // Handle special state-specific logic
            // Note: Backoff handling for special states can be added here if needed

            transition_result
        } else {
            let current_state_str = match resource_type {
                ResourceType::Scenario => ScenarioState::try_from(current_state)
                    .map(|s| s.as_str_name())
                    .unwrap_or("UNKNOWN"),
                ResourceType::Package => PackageState::try_from(current_state)
                    .map(|s| s.as_str_name())
                    .unwrap_or("UNKNOWN"),
                ResourceType::Model => ModelState::try_from(current_state)
                    .map(|s| s.as_str_name())
                    .unwrap_or("UNKNOWN"),
                _ => "UNKNOWN",
            };

            let target_state_str = match resource_type {
                ResourceType::Scenario => {
                    let normalized = format!(
                        "SCENARIO_STATE_{}",
                        state_change
                            .target_state
                            .trim()
                            .to_ascii_uppercase()
                            .replace('-', "_")
                    );
                    ScenarioState::from_str_name(&normalized)
                        .map(|s| s.as_str_name())
                        .unwrap_or("UNKNOWN")
                }
                ResourceType::Package => {
                    let normalized = format!(
                        "PACKAGE_STATE_{}",
                        state_change
                            .target_state
                            .trim()
                            .to_ascii_uppercase()
                            .replace('-', "_")
                    );
                    PackageState::from_str_name(&normalized)
                        .map(|s| s.as_str_name())
                        .unwrap_or("UNKNOWN")
                }
                ResourceType::Model => {
                    let normalized = format!(
                        "MODEL_STATE_{}",
                        state_change
                            .target_state
                            .trim()
                            .to_ascii_uppercase()
                            .replace('-', "_")
                    );
                    ModelState::from_str_name(&normalized)
                        .map(|s| s.as_str_name())
                        .unwrap_or("UNKNOWN")
                }
                _ => "UNKNOWN",
            };

            let transition_result = TransitionResult {
                new_state: current_state,
                error_code: ErrorCode::InvalidStateTransition,
                message: format!(
                    "No valid transition from {current_state_str} to {target_state_str} for resource type {resource_type:?}",
                ),
                actions_to_execute: vec![],
                transition_id: state_change.transition_id.clone(),
                error_details: format!(
                    "Invalid state transition attempted: {current_state_str} -> {target_state_str}"
                ),
            };

            self.update_health_status(&resource_key, &transition_result);
            transition_result
        }
    }

    // ========================================
    // VALIDATION AND UTILITY METHODS
    // ========================================

    /// Find a valid transition rule for the given parameters
    ///
    /// Searches the appropriate transition table for a rule that matches
    /// the specified resource type, current state, event, and target state.
    ///
    /// # Parameters
    /// - `resource_type`: The type of resource to check transitions for
    /// - `from_state`: The current state of the resource
    /// - `event`: The event triggering the transition
    /// - `to_state`: The desired target state
    ///
    /// # Returns
    /// - `Some(StateTransition)`: If a valid transition rule is found
    /// - `None`: If no valid transition exists for the given parameters
    ///
    /// # Implementation Details
    /// This method performs exact matching on all transition parameters.
    /// Wildcard or pattern matching is not currently supported.
    fn find_valid_transition(
        &self,
        resource_type: ResourceType,
        from_state: i32,
        event: &str,
        to_state: i32,
    ) -> Option<StateTransition> {
        if let Some(transitions) = self.transition_tables.get(&resource_type) {
            for transition in transitions {
                if transition.from_state == from_state
                    && transition.event == event
                    && transition.to_state == to_state
                {
                    return Some(transition.clone());
                }
            }
        }
        None
    }

    /// Validate state change request parameters
    fn validate_state_change(&self, state_change: &StateChange) -> Result<()> {
        if state_change.resource_name.trim().is_empty() {
            return Err("Resource name cannot be empty".to_string().into());
        }

        if state_change.transition_id.trim().is_empty() {
            return Err("Transition ID cannot be empty".to_string().into());
        }

        if state_change.current_state == state_change.target_state {
            return Err("Current and target states cannot be the same".to_string().into());
        }

        if state_change.source.trim().is_empty() {
            return Err("Source cannot be empty".to_string().into());
        }

        Ok(())
    }

    /// Generate a unique resource key
    fn generate_resource_key(&self, resource_type: ResourceType, resource_name: &str) -> String {
        format!("{resource_type:?}::{resource_name}")
    }

    /// Build context for action execution
    fn build_action_context(
        &self,
        state_change: &StateChange,
        transition: &StateTransition,
    ) -> HashMap<String, String> {
        let mut context = HashMap::new();

        let resource_type = match ResourceType::try_from(state_change.resource_type) {
            Ok(rt) => rt,
            Err(_) => ResourceType::Scenario, // fallback, adjust as needed
        };

        let from_state_str = match resource_type {
            ResourceType::Scenario => ScenarioState::try_from(transition.from_state)
                .map(|s| s.as_str_name())
                .unwrap_or("UNKNOWN"),
            ResourceType::Package => PackageState::try_from(transition.from_state)
                .map(|s| s.as_str_name())
                .unwrap_or("UNKNOWN"),
            ResourceType::Model => ModelState::try_from(transition.from_state)
                .map(|s| s.as_str_name())
                .unwrap_or("UNKNOWN"),
            _ => "UNKNOWN",
        };

        let to_state_str = match resource_type {
            ResourceType::Scenario => ScenarioState::try_from(transition.to_state)
                .map(|s| s.as_str_name())
                .unwrap_or("UNKNOWN"),
            ResourceType::Package => PackageState::try_from(transition.to_state)
                .map(|s| s.as_str_name())
                .unwrap_or("UNKNOWN"),
            ResourceType::Model => ModelState::try_from(transition.to_state)
                .map(|s| s.as_str_name())
                .unwrap_or("UNKNOWN"),
            _ => "UNKNOWN",
        };

        context.insert("from_state".to_string(), from_state_str.to_string());
        context.insert("to_state".to_string(), to_state_str.to_string());
        context.insert("event".to_string(), transition.event.clone());
        context.insert(
            "resource_name".to_string(),
            state_change.resource_name.clone(),
        );
        context.insert("source".to_string(), state_change.source.clone());
        context.insert(
            "timestamp_ns".to_string(),
            state_change.timestamp_ns.to_string(),
        );
        context
    }

    /// Updates health status based on transition result
    fn update_health_status(&mut self, resource_key: &str, transition_result: &TransitionResult) {
        if let Some(resource_state) = self.resource_states.get_mut(resource_key) {
            let now = Instant::now();
            resource_state.health_status.last_check = now;

            if transition_result.is_success() {
                resource_state.health_status.healthy = true;
                resource_state.health_status.consecutive_failures = 0;
                resource_state.health_status.status_message = "Healthy".to_string();
            } else {
                resource_state.health_status.consecutive_failures += 1;
                resource_state.health_status.status_message = transition_result.message.clone();

                // Mark as unhealthy if we have multiple consecutive failures
                if resource_state.health_status.consecutive_failures >= MAX_CONSECUTIVE_FAILURES {
                    resource_state.health_status.healthy = false;
                }
            }
        }
    }

    /// Infer the appropriate event type from state transition
    ///
    /// When an explicit event is not provided, this method attempts to
    /// determine the most appropriate event based on the current and target states.
    ///
    /// # Parameters
    /// - `current_state`: The current state of the resource
    /// - `target_state`: The desired target state
    ///
    /// # Returns
    /// A string representing the inferred event type
    ///
    /// # Examples
    /// - "Inactive" -> "Active" might infer "activate"
    /// - "Running" -> "Stopped" might infer "stop"
    /// - Any state -> "Failed" might infer "error"
    ///
    /// # Fallback Behavior
    /// If no specific event can be inferred, returns a generic event name
    /// based on the target state (e.g., "transition_to_active").
    fn infer_event_from_states(
        &self,
        current_state: i32,
        target_state: i32,
        resource_type: ResourceType,
    ) -> String {
        match resource_type {
            ResourceType::Scenario => match (current_state, target_state) {
                (x, y) if x == ScenarioState::Idle as i32 && y == ScenarioState::Waiting as i32 => {
                    "scenario_activation".to_string()
                }
                (x, y)
                    if x == ScenarioState::Waiting as i32 && y == ScenarioState::Allowed as i32 =>
                {
                    "condition_met".to_string()
                }
                (x, y)
                    if x == ScenarioState::Allowed as i32 && y == ScenarioState::Playing as i32 =>
                {
                    "policy_verification_success".to_string()
                }
                (x, y)
                    if x == ScenarioState::Allowed as i32 && y == ScenarioState::Denied as i32 =>
                {
                    "policy_verification_failure".to_string()
                }
                _ => format!("transition_{current_state}_{target_state}"),
            },
            ResourceType::Package => match (current_state, target_state) {
                (x, y)
                    if x == PackageState::Unspecified as i32
                        && y == PackageState::Initializing as i32 =>
                {
                    "launch_request".to_string()
                }
                (x, y)
                    if x == PackageState::Initializing as i32
                        && y == PackageState::Running as i32 =>
                {
                    "initialization_complete".to_string()
                }
                (x, y)
                    if x == PackageState::Initializing as i32
                        && y == PackageState::Degraded as i32 =>
                {
                    "partial_initialization_failure".to_string()
                }
                (x, y)
                    if x == PackageState::Initializing as i32
                        && y == PackageState::Error as i32 =>
                {
                    "critical_initialization_failure".to_string()
                }
                (x, y)
                    if x == PackageState::Running as i32 && y == PackageState::Degraded as i32 =>
                {
                    "model_issue_detected".to_string()
                }
                (x, y) if x == PackageState::Running as i32 && y == PackageState::Error as i32 => {
                    "critical_issue_detected".to_string()
                }
                (x, y) if x == PackageState::Running as i32 && y == PackageState::Paused as i32 => {
                    "pause_request".to_string()
                }
                (x, y)
                    if x == PackageState::Running as i32 && y == PackageState::Updating as i32 =>
                {
                    "update_request".to_string()
                }
                (x, y)
                    if x == PackageState::Degraded as i32 && y == PackageState::Running as i32 =>
                {
                    "model_recovery".to_string()
                }
                (x, y) if x == PackageState::Degraded as i32 && y == PackageState::Error as i32 => {
                    "additional_model_issues".to_string()
                }
                (x, y)
                    if x == PackageState::Degraded as i32 && y == PackageState::Paused as i32 =>
                {
                    "pause_request".to_string()
                }
                (x, y) if x == PackageState::Error as i32 && y == PackageState::Running as i32 => {
                    "recovery_successful".to_string()
                }
                (x, y) if x == PackageState::Paused as i32 && y == PackageState::Running as i32 => {
                    "resume_request".to_string()
                }
                (x, y)
                    if x == PackageState::Updating as i32 && y == PackageState::Running as i32 =>
                {
                    "update_successful".to_string()
                }
                (x, y) if x == PackageState::Updating as i32 && y == PackageState::Error as i32 => {
                    "update_failed".to_string()
                }
                _ => format!("transition_{current_state}_{target_state}"),
            },
            ResourceType::Model => match (current_state, target_state) {
                (x, y)
                    if x == ModelState::Unspecified as i32 && y == ModelState::Created as i32 =>
                {
                    "creation_request".to_string()
                }
                (x, y) if x == ModelState::Created as i32 && y == ModelState::Running as i32 => {
                    "containers_started".to_string()
                }
                (x, y) if x == ModelState::Created as i32 && y == ModelState::Dead as i32 => {
                    "startup_failed".to_string()
                }
                (x, y) if x == ModelState::Running as i32 && y == ModelState::Paused as i32 => {
                    "containers_paused".to_string()
                }
                (x, y) if x == ModelState::Running as i32 && y == ModelState::Exited as i32 => {
                    "containers_exited".to_string()
                }
                (x, y) if x == ModelState::Running as i32 && y == ModelState::Dead as i32 => {
                    "containers_died".to_string()
                }
                (x, y) if x == ModelState::Paused as i32 && y == ModelState::Running as i32 => {
                    "containers_resumed".to_string()
                }
                (x, y) if x == ModelState::Paused as i32 && y == ModelState::Dead as i32 => {
                    "containers_died_while_paused".to_string()
                }
                (x, y) if x == ModelState::Exited as i32 && y == ModelState::Running as i32 => {
                    "containers_restarted".to_string()
                }
                (x, y) if x == ModelState::Exited as i32 && y == ModelState::Dead as i32 => {
                    "containers_failed_to_restart".to_string()
                }
                (x, y) if x == ModelState::Dead as i32 && y == ModelState::Created as i32 => {
                    "model_recreation".to_string()
                }
                _ => format!("transition_{current_state}_{target_state}"),
            },
            _ => format!("transition_{current_state}_{target_state}"),
        }
    }

    /// Evaluate whether a transition condition is satisfied
    ///
    /// Processes conditional logic attached to state transitions to determine
    /// if the transition should be allowed to proceed.
    ///
    /// # Parameters
    /// - `condition`: The condition string to evaluate (e.g., "resource_count > 0")
    /// - `_state_change`: The state change request providing context for evaluation
    ///
    /// # Returns
    /// - `true`: If the condition is satisfied or no condition exists
    /// - `false`: If the condition fails evaluation
    ///
    /// # Supported Conditions
    /// The condition language should support:
    /// - Resource property comparisons
    /// - Metadata key existence checks
    /// - Numeric and string comparisons
    /// - Boolean logic operators
    ///
    /// # Error Handling
    /// Malformed conditions should be logged and default to `false` for safety.
    fn evaluate_condition(&self, condition: &str, _state_change: &StateChange) -> bool {
        // TODO: Implement real condition evaluation logic
        match condition {
            "all_models_normal" => true,
            "critical_models_normal" => true,
            "critical_models_failed" => false,
            "non_critical_model_issues" => true,
            "critical_model_issues" => false,
            "all_models_recovered" => true,
            "critical_models_affected" => false,
            "depends_on_recovery_level" => true,
            "depends_on_previous_state" => true,
            "depends_on_rollback_settings" => true,
            "sufficient_resources" => true,
            "timeout_or_error" => false,
            "all_containers_started" => true,
            "one_time_task" => true,
            "unexpected_termination" => false,
            "consecutive_restart_failures" => false,
            "node_communication_issues" => false,
            "restart_successful" => true,
            "retry_limit_reached" => false,
            "depends_on_actual_state" => true,
            "according_to_restart_policy" => true,
            _ => true, // Default to allow transition for unknown conditions
        }
    }

    /// Update the internal resource state after a successful transition
    ///
    /// Performs all necessary bookkeeping when a state transition succeeds,
    /// including updating timestamps, incrementing counters, and managing metadata.
    ///
    /// # Parameters
    /// - `resource_key`: Unique identifier for the resource
    /// - `state_change`: The original state change request
    /// - `new_state`: The state the resource has transitioned to
    /// - `resource_type`: The type of the resource
    ///
    /// # Side Effects
    /// - Updates or creates the resource state entry
    /// - Increments transition counter
    /// - Updates last transition timestamp
    /// - Clears any active backoff timers on successful transition
    /// - Updates health status if applicable
    fn update_resource_state(
        &mut self,
        resource_key: &str,
        state_change: &StateChange,

        new_state: i32,
        resource_type: ResourceType,
    ) {
        let now = Instant::now();

        let resource_state = self
            .resource_states
            .entry(resource_key.to_string())
            .or_insert_with(|| ResourceState {
                resource_type,
                resource_name: state_change.resource_name.clone(),
                current_state: Self::state_str_to_enum(
                    state_change.current_state.as_str(),
                    state_change.resource_type,
                ),
                desired_state: Some(Self::state_str_to_enum(
                    state_change.target_state.as_str(),
                    state_change.resource_type,
                )),
                last_transition_time: now,
                transition_count: 0,
                metadata: HashMap::new(),
                health_status: HealthStatus {
                    healthy: true,
                    status_message: "Healthy".to_string(),
                    last_check: now,
                    consecutive_failures: 0,
                },
            });

        resource_state.current_state = new_state;
        resource_state.last_transition_time = now;
        resource_state.transition_count += 1;
        resource_state.metadata.insert(
            "last_transition_id".to_string(),
            state_change.transition_id.clone(),
        );
        resource_state
            .metadata
            .insert("source".to_string(), state_change.source.clone());
    }

    // ========================================
    // PUBLIC QUERY METHODS
    // ========================================

    /// Determines the model state based on the states of its associated containers.
    ///
    /// Implements the model state determination logic according to the updated requirements:
    /// - No containers → Model state: Created (생성 시 기본 상태)
    /// - All containers paused → Model state: Paused (모든 container가 paused 상태일 때)
    /// - All containers exited → Model state: Exited (모든 container가 exited 상태일 때)  
    /// - Any container dead → Model state: Dead (하나 이상의 container가 dead 상태이거나, model 정보 조회 실패)
    /// - Otherwise → Model state: Running (위 조건을 모두 만족하지 않을 때)
    ///
    /// # Arguments
    /// * `containers` - Vector of container references associated with the model
    ///
    /// # Returns
    /// * `Option<ModelState>` - Determined model state, or None if unable to determine
    pub async fn determine_model_state(containers: &[&ContainerInfo]) -> Option<ModelState> {
        if containers.is_empty() {
            return Some(ModelState::Created); // No containers = Created state (생성 시 기본 상태)
        }

        let mut all_paused = true;
        let mut all_exited = true;
        let mut any_dead = false;

        for container in containers {
            // Get container status from state map
            let status = container
                .state
                .get("Status")
                .map(|s| s.as_str())
                .unwrap_or("unknown");
            let running = container
                .state
                .get("Running")
                .and_then(|s| s.parse::<bool>().ok())
                .unwrap_or(false);
            let paused = container
                .state
                .get("Paused")
                .and_then(|s| s.parse::<bool>().ok())
                .unwrap_or(false);
            let dead = container
                .state
                .get("Dead")
                .and_then(|s| s.parse::<bool>().ok())
                .unwrap_or(false);

            println!(
                "    Container {} status: {} (running: {}, paused: {}, dead: {})",
                container.id, status, running, paused, dead
            );

            // Check for dead containers first (highest priority)
            if dead || status.to_lowercase() == "dead" {
                any_dead = true;
            }

            // Check if all containers are paused
            if !paused && status.to_lowercase() != "paused" {
                all_paused = false;
            }

            // Check if all containers are exited
            if running || (status.to_lowercase() != "exited" && !status.contains("exit")) {
                all_exited = false;
            }
        }

        // Apply state determination logic based on updated requirements
        if any_dead {
            println!("  → Model state: Dead (하나 이상의 container가 dead 상태)");
            Some(ModelState::Dead) // Dead state for dead containers
        } else if all_paused {
            println!("  → Model state: Paused (모든 container가 paused 상태)");
            Some(ModelState::Paused) // Paused state for all paused containers
        } else if all_exited {
            println!("  → Model state: Exited (모든 container가 exited 상태)");
            Some(ModelState::Exited) // Exited state for all exited containers
        } else {
            println!("  → Model state: Running (기본 상태)");
            Some(ModelState::Running) // Default running state
        }
    }

    // Utility: Convert state string to proto enum value
    fn state_str_to_enum(state: &str, resource_type: i32) -> i32 {
        // Map "idle" -> "SCENARIO_STATE_IDLE", etc.
        let normalized = match ResourceType::try_from(resource_type) {
            Ok(ResourceType::Scenario) => format!(
                "SCENARIO_STATE_{}",
                state.trim().to_ascii_uppercase().replace('-', "_")
            ),
            Ok(ResourceType::Package) => format!(
                "PACKAGE_STATE_{}",
                state.trim().to_ascii_uppercase().replace('-', "_")
            ),
            Ok(ResourceType::Model) => format!(
                "MODEL_STATE_{}",
                state.trim().to_ascii_uppercase().replace('-', "_")
            ),
            _ => state.trim().to_ascii_uppercase().replace('-', "_"),
        };
        match ResourceType::try_from(resource_type) {
            Ok(ResourceType::Scenario) => ScenarioState::from_str_name(&normalized)
                .map(|s| s as i32)
                .unwrap_or(ScenarioState::Unspecified as i32),
            Ok(ResourceType::Package) => PackageState::from_str_name(&normalized)
                .map(|s| s as i32)
                .unwrap_or(PackageState::Unspecified as i32),
            Ok(ResourceType::Model) => ModelState::from_str_name(&normalized)
                .map(|s| s as i32)
                .unwrap_or(ModelState::Unspecified as i32),
            _ => 0,
        }
    }

    /// Determines the package state based on the states of its associated models.
    ///
    /// Implements the package state determination logic according to the requirements:
    /// - No models → Package state: idle (맨 처음 package의 상태, 생성 시 기본 상태)
    /// - All models paused → Package state: paused (모든 model이 paused 상태일 때)
    /// - All models exited → Package state: exited (모든 model이 exited 상태일 때)  
    /// - Some models dead (but not all) → Package state: degraded (일부 model이 dead 상태일 때)
    /// - All models dead → Package state: error (모든 model이 dead 상태일 때)
    /// - Otherwise → Package state: running (위 조건을 모두 만족하지 않을 때)
    ///
    /// # Arguments
    /// * `model_states` - Vector of model state references associated with the package
    ///
    /// # Returns
    /// * `Option<PackageState>` - Determined package state, or None if unable to determine
    pub async fn determine_package_state(
        model_states: &[(String, ModelState)],
    ) -> Option<PackageState> {
        if model_states.is_empty() {
            return Some(PackageState::Idle); // No models = idle state (생성 시 기본 상태)
        }

        let mut all_paused = true;
        let mut all_exited = true;
        let mut dead_count = 0;
        let total_models = model_states.len();

        for (model_name, model_state) in model_states {
            println!("    Model {} state: {:?}", model_name, model_state);

            match model_state {
                ModelState::Dead => {
                    dead_count += 1;
                    all_paused = false;
                    all_exited = false;
                }
                ModelState::Paused => {
                    all_exited = false;
                }
                ModelState::Exited => {
                    all_paused = false;
                }
                ModelState::Created | ModelState::Running => {
                    all_paused = false;
                    all_exited = false;
                }
                ModelState::Unspecified => {
                    // Handle unspecified state - treat as non-running
                    all_paused = false;
                    all_exited = false;
                }
            }
        }

        // Apply package state determination logic based on requirements
        if dead_count == total_models {
            println!("  → Package state: error (모든 model이 dead 상태)");
            Some(PackageState::Error) // All models dead = Error state
        } else if dead_count > 0 {
            println!("  → Package state: degraded (일부 model이 dead 상태)");
            Some(PackageState::Degraded) // Some models dead = Degraded state
        } else if all_paused {
            println!("  → Package state: paused (모든 model이 paused 상태)");
            Some(PackageState::Paused) // All models paused = Paused state
        } else if all_exited {
            println!("  → Package state: exited (모든 model이 exited 상태)");
            Some(PackageState::Exited) // All models exited = Exited state
        } else {
            println!("  → Package state: running (기본 상태)");
            Some(PackageState::Running) // Default running state
        }
    }

    /// Process package state changes based on model states.
    ///
    /// This function implements the package state determination logic from the documentation,
    /// retrieving all model states from ETCD and determining package states based on the
    /// collective state of associated models:
    /// - idle: No models (생성 시 기본 상태)
    /// - paused: All models paused (모든 model이 paused 상태일 때)
    /// - exited: All models exited (모든 model이 exited 상태일 때)
    /// - degraded: Some models dead (일부 model이 dead 상태일 때)
    /// - error: All models dead (모든 model이 dead 상태일 때)
    /// - running: Default state (위 조건을 모두 만족하지 않을 때)
    pub async fn process_package_state_changes() {
        println!("--- Processing Package State Changes ---");

        // Step 1: Get all model states from ETCD
        let model_states = match Self::get_all_model_states_from_etcd().await {
            Ok(states) => states,
            Err(e) => {
                eprintln!("  Failed to retrieve model states from ETCD: {:?}", e);
                return;
            }
        };

        if model_states.is_empty() {
            println!("  No model states found in ETCD");
            return;
        }

        println!("  Retrieved {} model states from ETCD", model_states.len());

        // Step 2: Group models by package
        // For now, we'll assume a simple naming convention: package = first part of model name before '-'
        // In a real implementation, this would use proper metadata or annotations
        let mut package_models: std::collections::HashMap<String, Vec<(String, ModelState)>> =
            std::collections::HashMap::new();

        for (model_name, model_state) in model_states {
            // Extract package name from model name (simple convention)
            let package_name = if let Some(pos) = model_name.find('-') {
                model_name[..pos].to_string()
            } else {
                // If no '-' found, use the full model name as package name
                model_name.clone()
            };

            package_models
                .entry(package_name)
                .or_insert_with(Vec::new)
                .push((model_name, model_state));
        }

        println!(
            "  Found {} packages with associated models",
            package_models.len()
        );

        // Step 3: Process each package
        for (package_name, models) in package_models {
            println!("--- Processing Package: {} ---", package_name);
            println!("  Associated Models: {}", models.len());

            // Determine package state based on model states
            if let Some(new_package_state) = Self::determine_package_state(&models).await {
                println!("  Determined Package State: {:?}", new_package_state);

                // Save the package state to etcd
                if let Err(e) =
                    Self::save_package_state_to_etcd(&package_name, new_package_state).await
                {
                    eprintln!("  Failed to save package state to etcd: {:?}", e);
                } else {
                    println!("  Package state saved to etcd successfully");
                }

                // Check if ActionController reconcile is needed for error state
                if matches!(new_package_state, PackageState::Error) {
                    println!(
                        "  📢 Package in ERROR state - would trigger ActionController reconcile"
                    );
                    // In a real implementation, this would send a gRPC request to ActionController
                    // self.trigger_action_controller_reconcile(&package_name).await;
                }
            } else {
                println!("  Could not determine package state from model states");
            }
        }

        println!("Package state processing completed");
    }

    /// Retrieve all model states from ETCD using the /model/ prefix.
    ///
    /// # Returns
    /// * `Result<Vec<(String, ModelState)>>` - Vector of (model_name, model_state) tuples
    async fn get_all_model_states_from_etcd() -> Result<Vec<(String, ModelState)>> {
        let prefix = "/model/";
        println!("  Querying ETCD with prefix: {}", prefix);

        let kvs = common::etcd::get_all_with_prefix(prefix).await?;
        let mut model_states = Vec::new();

        for kv in kvs {
            // Extract model name from key: "/model/{name}/state" -> "{name}"
            if let Some(model_name) = Self::extract_model_name_from_key(&kv.key) {
                // Parse the state value
                if let Ok(model_state) = Self::parse_model_state(&kv.value) {
                    println!("    Found model: {} -> {:?}", model_name, model_state);
                    model_states.push((model_name, model_state));
                } else {
                    eprintln!(
                        "    Failed to parse model state for {}: {}",
                        model_name, kv.value
                    );
                }
            } else {
                eprintln!("    Failed to extract model name from key: {}", kv.key);
            }
        }

        Ok(model_states)
    }

    /// Extract model name from ETCD key format "/model/{name}/state".
    ///
    /// # Arguments
    /// * `key` - ETCD key in format "/model/{name}/state"
    ///
    /// # Returns
    /// * `Option<String>` - Extracted model name or None if parsing fails
    fn extract_model_name_from_key(key: &str) -> Option<String> {
        if key.starts_with("/model/") && key.ends_with("/state") {
            let name_part = &key[7..]; // Remove "/model/" prefix
            if let Some(end) = name_part.rfind("/state") {
                return Some(name_part[..end].to_string());
            }
        }
        None
    }

    /// Parse model state string into ModelState enum.
    ///
    /// # Arguments
    /// * `state_str` - String representation of model state
    ///
    /// # Returns
    /// * `Result<ModelState>` - Parsed ModelState or error
    fn parse_model_state(state_str: &str) -> Result<ModelState> {
        match state_str {
            "MODEL_STATE_CREATED" => Ok(ModelState::Created),
            "MODEL_STATE_PAUSED" => Ok(ModelState::Paused),
            "MODEL_STATE_EXITED" => Ok(ModelState::Exited),
            "MODEL_STATE_DEAD" => Ok(ModelState::Dead),
            "MODEL_STATE_RUNNING" => Ok(ModelState::Running),
            _ => Err(format!("Unknown model state: {}", state_str).into()),
        }
    }

    /// Get the current model state from ETCD for change detection.
    ///
    /// # Arguments
    /// * `model_name` - Name/identifier of the model
    ///
    /// # Returns
    /// * `Result<Option<ModelState>>` - Current model state if found, None if not found, or error
    pub async fn get_current_model_state(model_name: &str) -> Result<Option<ModelState>> {
        let key = format!("/model/{}/state", model_name);

        match common::etcd::get(&key).await {
            Ok(value) => {
                // Parse the retrieved state value
                match Self::parse_model_state(&value) {
                    Ok(model_state) => Ok(Some(model_state)),
                    Err(e) => {
                        eprintln!(
                            "  Failed to parse current model state for {}: {:?}",
                            model_name, e
                        );
                        Err(e)
                    }
                }
            }
            Err(_) => {
                // Key not found or other error - treat as no previous state
                Ok(None)
            }
        }
    }

    /// Saves the model state to etcd using the specified key format.
    ///
    /// Implements the etcd storage pattern from the documentation:
    /// Key format: /model/{model_name}/state
    /// Value: ModelState as string representation
    ///
    /// # Arguments
    /// * `model_name` - Name/identifier of the model
    /// * `model_state` - The determined model state to save
    ///
    /// # Returns
    /// * `Result<()>` - Success or error
    pub async fn save_model_state_to_etcd(model_name: &str, model_state: ModelState) -> Result<()> {
        let key = format!("/model/{}/state", model_name);
        let value = model_state.as_str_name();

        println!("    Saving to etcd - Key: {}, Value: {}", key, value);

        if let Err(e) = common::etcd::put(&key, value).await {
            eprintln!("    Failed to save model state to etcd: {:?}", e);
            return Err(Box::new(e));
        }

        println!("    Successfully saved model state to etcd");
        Ok(())
    }

    /// Saves package state to ETCD following the specified format.
    ///
    /// # Arguments
    /// * `package_name` - Name/identifier of the package
    /// * `package_state` - The determined package state to save
    ///
    /// # Returns
    /// * `Result<()>` - Success or error
    async fn save_package_state_to_etcd(
        package_name: &str,
        package_state: PackageState,
    ) -> Result<()> {
        let key = format!("/package/{}/state", package_name);
        let value = package_state.as_str_name();

        println!("    Saving to etcd - Key: {}, Value: {}", key, value);

        if let Err(e) = common::etcd::put(&key, value).await {
            eprintln!("    Failed to save package state to etcd: {:?}", e);
            return Err(Box::new(e));
        }

        println!("    Successfully saved package state to etcd");
        Ok(())
    }
}

/// Default implementation that creates a new StateMachine
///
/// Provides a convenient way to create a StateMachine with default
/// configuration using the `Default` trait.
impl Default for StateMachine {
    fn default() -> Self {
        Self::new()
    }
}
